--addons/zeros_botnet_1.3.0/lua/zbot/wallet/sh_wallet.lua
zbf = zbf or {}
zbf.Wallet = zbf.Wallet or {}

/*
	Sets up the list which later holds all types of currencys
*/
function zbf.Wallet.Setup(ent)
	ent.zbf_Wallet = {
		// [CurrencyID] = Amount
	}
end

/*
	Returns the whole wallet
*/
function zbf.Wallet.Get(ent)
	return ent.zbf_Wallet or {}
end

/*
	Returns the specified currency or 0
*/
function zbf.Wallet.GetCurrency(ent,c_type)
	if ent.zbf_Wallet == nil then ent.zbf_Wallet = {} end
	return ent.zbf_Wallet[c_type] or 0
end

/*
	Convert the LIST ID to Currency SHORT
*/
function zbf.Wallet.ConvertToShort(Wallet)
	local clean = {}
	for c_id,c_amount in pairs(Wallet) do
		if c_id == nil then continue end
		if c_amount == nil then continue end
		local dat = zbf.Currency.Get(c_id)
		if dat == nil then continue end
		if dat.short == nil then continue end
		if c_amount <= 0 then continue end
		clean[dat.short] = c_amount
	end
	return clean
end

/*
	Convert the Currency SHORT to LIST ID
*/
function zbf.Wallet.ConvertToID(Wallet)
	local clean = {}
	for c_short,c_amount in pairs(Wallet) do

		if c_short == nil then continue end
		if c_amount == nil then continue end
		local c_id = zbf.Currency.GetID(c_short)
		if c_id == nil then continue end
		local dat = zbf.Currency.Get(c_id)
		if dat == nil then continue end
		if c_amount <= 0 then continue end
		clean[c_id] = c_amount
	end
	return clean
end

/*
	Calculates the current money value of all currencies combined
*/
function zbf.Wallet.GetMoneyValue(ent)
	local CurrentMoneyValue = 0
	for c_type,c_amount in pairs(ent.zbf_Wallet) do
		if c_amount == nil or c_amount == 0 then continue end

		// Thats the money value of this currency
		local currencyValue = zbf.Currency.GetValue(c_type)

		// Thats the money value amount of this currency inside the portfolio
		local moneyValue = currencyValue * c_amount

		CurrentMoneyValue = CurrentMoneyValue + moneyValue
	end
	return math.Round(CurrentMoneyValue)
end
